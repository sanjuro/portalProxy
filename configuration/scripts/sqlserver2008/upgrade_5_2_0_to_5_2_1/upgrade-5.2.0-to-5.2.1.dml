-- Script to add tags.
-- Tags are added to
-- - server catalog
-- - portal catalog
-- - instances
-- - customizations

if exists (select 1 from sysobjects where name='add_tag')
    drop procedure add_tag
go

-- Procedure to add an tag reference to the TAGS table if it does not exist.
CREATE PROCEDURE add_tag
(
    @pContextItemName nvarchar(255),
    @pTagName nvarchar(255),
    @pTagType nvarchar(255)
)
AS
BEGIN
    DECLARE @tagId numeric(19,0)

    select @tagId=id
    from   tags
	where  contextItemName = @pContextItemName
	and    name  = @pTagName
	and    type  = @pTagType
	;

    IF (@@rowcount=0)
	BEGIN
        insert into tags
        ( contextItemName
        , name
        , type
        )
        values
        ( @pContextItemName
        , @pTagName
        , @pTagType
        )
    END
END
go

if exists (select 1 from sysobjects where name='add_item_tag')
    drop procedure add_item_tag
go

-- Procedure to add an item tag reference to the ITEM_TAGS table if it does not exist.
CREATE PROCEDURE add_item_tag
(
    @pItemId numeric(19,0),
    @pTagId numeric(19,0)
)
AS
BEGIN
    DECLARE @itemTagId numeric(19,0)

    select @itemTagId=id
    from   item_tags
	where  item_id = @pItemId
	and    tag_id  = @pTagId
	;

    IF (@@rowcount=0)
	BEGIN
        insert into item_tags
        ( item_id
        , tag_id
        , blacklist
        )
        values
        ( @pItemId
        , @pTagId
        , 0
        )
    END
END
go

if exists (select 1 from sysobjects where name='add_tag_to_item')
    drop procedure add_tag_to_item;
go

-- Procedure to add an tag to the TAGS table if it does not exist.
-- This procedure will also add the tag to the item mentioned and to all its extensions.
CREATE PROCEDURE add_tag_to_item
(
    @pItemName nvarchar(255),
    @pTagName nvarchar(255),
    @pTagType nvarchar(255)
)
AS
BEGIN
    DECLARE @serverItemId numeric(19,0)
    DECLARE @tagId numeric(19,0)
	DECLARE @portalName nvarchar(255)
    DECLARE @portalItemId numeric(19,0)
    DECLARE @instanceItemId numeric(19,0)
    DECLARE @personalItemId numeric(19,0)

	-- Add tag to server scope
	execute add_tag '[BBHOST]', @pTagName, @pTagType;
    -- Insert item_tag for server catalog item
    select @serverItemId=id from items where name=@pItemName and contextItemName= '[BBHOST]'
    if (@@rowcount=1)
    begin
        select @tagId=id from tags where name=@pTagName and type = @pTagType and contextItemName= '[BBHOST]'
        execute add_item_tag @serverItemId, @tagId;

        -- Insert tag for portal catalog item
        select @portalItemId=0
        while(1=1)
        begin
            select top 1 @portalItemId=id, @portalName=contextItemName from items where extendedItem_id=@serverItemId and state='ASSIGNED' and id>@portalItemId
            if (@@rowcount=0)
                break
            execute add_tag @portalName, @pTagName, @pTagType
            select @tagId=id from tags where name=@pTagName and type = @pTagType and contextItemName= @portalName
            execute add_item_tag @portalItemId, @tagId

            -- Insert tag for portal instances
            select @instanceItemId=0
            while(1=1)
            begin
                select top 1 @instanceItemId=id from items where extendedItem_id=@portalItemId and state='INSTANTIATED' and id>@instanceItemId
                if (@@rowcount=0)
                    break
                execute add_item_tag @instanceItemId, @tagId
                -- Insert property for personalized items
                select @personalItemId=0
                while(1=1)
                begin
                    select top 1  @personalItemId=id from items where extendedItem_id=@instanceItemId and state='PERSONALIZED' and id>@personalItemId
                        if (@@rowcount=0)
                            break
                    execute add_item_tag @personalItemId, @tagId
                end
            end
        end
    end
END
go


-- Migrate Link item references from name to uuid.
update property_definition
set    internalvalue = item.uuid
from   property_definition ref
,      items link
,      items item
where  ref.name             = 'ItemRef'
and    ref.item_id          = link.id
and    link.type            = 'LINK'
and    link.contextitemname = item.contextitemname
and    item.name            = ref.internalvalue
;

-- --> Changes on Standard_Widget_Sample
-- Added tag backbase
execute add_tag_to_item 'Standard_Widget_Sample','backbase','regular'

-- --> Changes on Standard_W3C_Sample
-- Added tag backbase
execute add_tag_to_item 'Standard_W3C_Sample','backbase','regular'

-- --> Changes on CatalogBrowser
-- Added tag backbase
execute add_tag_to_item 'CatalogBrowser','backbase','regular'

-- --> Changes on TabLayoutContainer
-- Removed tag layout
delete from   item_tags
where (item_id in (select id from items where CONTEXTITEMNAME = '[BBHOST]' AND   NAME = 'TabLayoutContainer')
   or  item_id in (select ext.id
                  from items ext
                  ,    items ite
                  where ite.CONTEXTITEMNAME = '[BBHOST]'
                  AND   ite.NAME = 'TabLayoutContainer'
                  and   ite.id = ext.extendedItem_id
                  )
       )
and   tag_id in (select id
                 from tags
                 where name = 'layout'
                )
;

-- Updated property title
update property_definition
set    internalvalue = 'Horizontal Tab'
where (item_id in (select id from items where CONTEXTITEMNAME = '[BBHOST]' AND   NAME = 'TabLayoutContainer')
   or  item_id in (select ext.id
                  from items ext
                  ,    items ite
                  where ite.CONTEXTITEMNAME = '[BBHOST]'
                  AND   ite.NAME = 'TabLayoutContainer'
                  and   ite.id = ext.extendedItem_id
                  )
       )
and   name = 'title'
;

-- Updated property TemplateName
update property_definition
set    internalvalue = 'HTab'
where (item_id in (select id from items where CONTEXTITEMNAME = '[BBHOST]' AND   NAME = 'TabLayoutContainer')
   or  item_id in (select ext.id
                  from items ext
                  ,    items ite
                  where ite.CONTEXTITEMNAME = '[BBHOST]'
                  AND   ite.NAME = 'TabLayoutContainer'
                  and   ite.id = ext.extendedItem_id
                  )
       )
and   name = 'TemplateName'
;

-- Modified property selectedChild: Added label and viewHint
update property_definition
set    viewhint = 'text-input,designModeOnly,user'
,      label = 'Default tab'
where (item_id in (select id from items where CONTEXTITEMNAME = '[BBHOST]' AND   NAME = 'TabLayoutContainer')
   or  item_id in (select ext.id
                  from items ext
                  ,    items ite
                  where ite.CONTEXTITEMNAME = '[BBHOST]'
                  AND   ite.NAME = 'TabLayoutContainer'
                  and   ite.id = ext.extendedItem_id
                  )
       )
and   name = 'selectedChild'
;

-- Modified property hideTab: Changed type from string to boolean default value false.
update property_definition
set    type = 'boolean'
,      internalvalue = 'false'
where (item_id in (select id from items where CONTEXTITEMNAME = '[BBHOST]' AND   NAME = 'TabLayoutContainer')
   or  item_id in (select ext.id
                  from items ext
                  ,    items ite
                  where ite.CONTEXTITEMNAME = '[BBHOST]'
                  AND   ite.NAME = 'TabLayoutContainer'
                  and   ite.id = ext.extendedItem_id
                  )
       )
and   name = 'hideTab'
;

-- Removed property defaultTab
delete from property_definition
where (item_id in (select id from items where CONTEXTITEMNAME = '[BBHOST]' AND   NAME = 'TabLayoutContainer')
   or  item_id in (select ext.id
                  from items ext
                  ,    items ite
                  where ite.CONTEXTITEMNAME = '[BBHOST]'
                  AND   ite.NAME = 'TabLayoutContainer'
                  and   ite.id = ext.extendedItem_id
                  )
       )
and name in ('defaultTab')
;

-- --> Change TabLayoutContainer to HTabLayoutContainer (rename of server catalog item)
update items set name = 'HTabLayoutContainer' where name = 'TabLayoutContainer' and CONTEXTITEMNAME = '[BBHOST]';

-- --> Change Tab container template
-- Update property Web
-- Change name from Tab to HTab
update property_definition
set    internalvalue = 'containers/bbHTabContainerLayout'
where  item_id in (select id from items where CONTEXTITEMNAME = '[BBHOST]' AND   NAME = 'Tab')
and name = 'Web'
;

update items set name = 'HTab' where name = 'Tab' and CONTEXTITEMNAME = '[BBHOST]';

-- --> Changes on AdvancedNav widget
-- Modified property navTemplate: value (location of the template) changed
update property_definition
set    internalvalue = '$(contextRoot)/static/backbase.com.2012.nexus/widgets/AdvancedNav/navTemplate/genericDropdownMenu/mustache_top_level.html'
where  internalvalue='$(contextRoot)/static/backbase.com.2012.nexus/widgets/AdvancedNav/navTemplate/BBStyleTemplate/mustache_top_level.html'
;

-- Added tag backbase
execute add_tag_to_item 'AdvancedNav','backbase','regular'

-- --> Changes on SectionNav widget
-- Modified property navDepth: value changed from 2 to 1
update property_definition
set    internalvalue = '1'
where (item_id in (select id from items where CONTEXTITEMNAME = '[BBHOST]' AND   NAME = 'SectionNav')
   or  item_id in (select ext.id
                  from items ext
                  ,    items ite
                  where ite.CONTEXTITEMNAME = '[BBHOST]'
                  AND   ite.NAME = 'SectionNav'
                  and   ite.id = ext.extendedItem_id
                  )
       )
and   name = 'navDepth'
and   internalvalue = '2'
;

-- Added tag backbase
execute add_tag_to_item 'SectionNav','backbase','regular'


-- Cleanup of stored procedures
drop procedure add_tag_to_item
go
drop procedure add_item_tag
go
drop procedure add_tag
go

-- remove sys2sys acl from portalfoundation item
delete from acl_entry
where sid = (select id from acl_sid where sid = 'group_sys2sys')
and   acl_object_identity = (select obj.id
                             from   acl_object_identity obj
                             ,      items ite
                             ,      acl_class cls
                             where  cls.id = obj.object_id_class
                             and    ite.id = obj.object_id_identity
                             and    cls.class = 'com.backbase.portal.foundation.domain.model.PortalFoundation')
;

-- Fix hierarchical links on urls
-- Add sectionName property containing the link name
-- Add generatedUrl property based on the link hierarchy and the sectionName value.
if exists (select 1 from sysobjects where name='translate')
    drop function translate;
go

create function dbo.translate
(
    @value nvarchar(max),
    @replace nvarchar(30),
    @replaceWith nvarchar(30)
) returns nvarchar(max) as
begin
   DECLARE @ln_counter int
   DECLARE @lv_char nvarchar(1);

   set @ln_counter = 1

   while (@ln_counter <= len(@replace))
   begin
     set @lv_char = substring(@replace, @ln_counter , 1)
	 set @value = replace(@value, @lv_char, @replaceWith)
     set @ln_counter = @ln_counter + 1
   end

   return @value
 end
go

insert into property_definition
( name
, internalValue
, type
, item_id
)
select
  'sectionName'
,  lower(dbo.translate(replace(pdn.internalValue, ' ', '-'), '~!@#$%^&*()+`=[]{};'':",./<>?', ''))
, 'string'
, ite.id
from  items ite
,     property_definition pdn
where ite.id = pdn.item_id
and   ite.type = 'LINK'
and   pdn.name = 'title'
;

if exists (select 1 from sysobjects where name='fix_dup_section_name')
    drop procedure fix_dup_section_name;
go

create procedure fix_dup_section_name
as
begin
   DECLARE @ln_counter integer

   DECLARE @ln_link_id numeric(19,0)
   DECLARE @lv_link_section_name nvarchar(768)
   DECLARE @lv_link_parent_item_name nvarchar(255)
   DECLARE @lv_link_context_item_name nvarchar(255)

   DECLARE @ln_link_dup_id numeric(19,0)

  DECLARE c_dup_link cursor FOR
          select ite1.id
          ,      pdn1.internalValue
          ,      ite1.parentItemName
          ,      ite1.contextItemName
          from   items ite1
          ,      property_definition pdn1
          ,      items ite2
          ,      property_definition pdn2
          where  ite1.id = pdn1.item_id
          and    ite1.type = 'LINK'
          and    ite1.parentItemName != ite1.contextItemName
          and    pdn1.name = 'sectionName'
          and    ite2.id = pdn2.item_id
          and    ite2.type = 'LINK'
          and    ite2.parentItemName != ite2.contextItemName
          and    pdn2.name = 'sectionName'
          and    ite1.contextItemName = ite2.contextItemName
          and    ite1.parentItemName = ite2.parentItemName
          and    ite1.id != ite2.id
          and    pdn1.internalValue = pdn2.internalValue

   OPEN c_dup_link
   FETCH NEXT FROM c_dup_link INTO @ln_link_id, @lv_link_section_name, @lv_link_parent_item_name, @lv_link_context_item_name


   WHILE @@FETCH_STATUS = 0
   begin
      set @ln_counter = 1

      DECLARE c_dup_link2 cursor FOR
          select ite1.id
          from   items ite1
          ,      property_definition pdn1
          where  ite1.id = pdn1.item_id
          and    ite1.type = 'LINK'
          and    ite1.id != @ln_link_id
          and    pdn1.name = 'sectionName'
          and    pdn1.internalValue = @lv_link_section_name
          and    ite1.parentItemName = @lv_link_parent_item_name
          and    ite1.contextItemName = @lv_link_context_item_name

      OPEN c_dup_link2
      FETCH NEXT FROM c_dup_link2 INTO @ln_link_dup_id

      WHILE @@FETCH_STATUS = 0
      begin
	     -- Update the duplicate section name
	     update property_definition
             set    internalValue = concat(@lv_link_section_name,'-',@ln_counter)
	     where  item_id = @ln_link_dup_id
	     and    name = 'sectionName'

	     set @ln_counter = @ln_counter + 1
         FETCH NEXT FROM c_dup_link2 INTO @ln_link_dup_id
      END

     CLOSE c_dup_link2
	 DEALLOCATE c_dup_link2
	 -- Close the cursor to refresh the result
     CLOSE c_dup_link
     OPEN c_dup_link
     FETCH NEXT FROM c_dup_link INTO @ln_link_id, @lv_link_section_name, @lv_link_parent_item_name, @lv_link_context_item_name
   END

   CLOSE c_dup_link
   DEALLOCATE c_dup_link
end
go

execute fix_dup_section_name

if exists (select 1 from sysobjects where name='fix_generated_url')
    drop procedure fix_generated_url;
go

create procedure fix_generated_url
as
begin
   DECLARE @lv_generated_url nvarchar(768);
   DECLARE @lv_parent_item_name nvarchar(255);

   DECLARE @ln_link_id numeric(19,0)
   DECLARE @lv_link_name nvarchar(255);
   DECLARE @lv_link_section_name nvarchar(768);
   DECLARE @lv_link_parent_item_name nvarchar(255);
   DECLARE @lv_link_parent_section_name nvarchar(768);
   DECLARE @lv_link_context_item_name nvarchar(255);

   DECLARE c_link CURSOR FOR
          select ite.id
          ,      pdn.internalValue
          ,      ite.parentItemName
          ,      ite.contextItemName
          from   items ite
          ,      property_definition pdn
          where  ite.id = pdn.item_id
          and    ite.type = 'LINK'
          and    ite.parentItemName != ite.contextItemName
          and    pdn.name = 'sectionName'
          ;

   OPEN c_link
   FETCH next from c_link INTO @ln_link_id, @lv_link_section_name, @lv_link_parent_item_name, @lv_link_context_item_name

   WHILE @@FETCH_STATUS = 0
   begin
     select @lv_generated_url = @lv_link_section_name;
     while(1=1)
	 begin
         select @lv_parent_item_name=ite.parentItemName
		 ,      @lv_link_parent_section_name=pdn.internalValue
         from   items ite
         ,      property_definition pdn
         where  ite.id = pdn.item_id
         and    ite.name = @lv_link_parent_item_name
         and    ite.parentItemName != ite.contextItemName
         and    ite.contextItemName = @lv_link_context_item_name
         and    pdn.name = 'sectionName'
         ;

         if (@@rowcount=0)
             break

         set @lv_generated_url = concat(@lv_link_parent_section_name,'/',@lv_generated_url);
         set @lv_link_parent_item_name = @lv_parent_item_name;

     end

     select @lv_generated_url = concat(@lv_link_context_item_name,'/',@lv_generated_url)

     insert into property_definition
     ( name
     , internalValue
     , type
     , item_id
     )
     values
     ( 'generatedUrl'
     , @lv_generated_url
     , 'string'
     , @ln_link_id
     )

     FETCH next from c_link INTO @ln_link_id, @lv_link_section_name, @lv_link_parent_item_name, @lv_link_context_item_name
   end

   CLOSE c_link
   DEALLOCATE c_link
end
go

execute fix_generated_url

-- Insert ACL for every unsecured property. Property will inherit security from its item.
insert into acl_object_identity
(
  OBJECT_ID_CLASS
, OBJECT_ID_IDENTITY
, PARENT_OBJECT
, OWNER_SID
, ENTRIES_INHERITING
)
select (select id from acl_class where class = 'com.backbase.portal.foundation.domain.conceptual.PropertyDefinition')
,      pdn.id
,      (select id
        from acl_object_identity
        where OBJECT_ID_IDENTITY = ite.id
        and   object_id_class = (select id from acl_class where class = cls.class)
       )
,      (select owner_sid
        from acl_object_identity
        where OBJECT_ID_IDENTITY = ite.id
        and   object_id_class = (select id from acl_class where class = cls.class)
       )
,      1
from   acl_object_identity obj
,      acl_class           cls
,      items               ite
,      property_definition pdn
where  OBJ.OBJECT_ID_IDENTITY = ite.id
and    obj.object_id_class = cls.id
and    cls.class =  concat('com.backbase.portal.foundation.domain.model.', ite.discriminator)
and    ite.id = PDN.ITEM_ID
and    pdn.id not in (select object_id_identity
                      from   acl_object_identity
                      where  object_id_class in (select id from acl_class where class = 'com.backbase.portal.foundation.domain.conceptual.PropertyDefinition')
                    )
;
