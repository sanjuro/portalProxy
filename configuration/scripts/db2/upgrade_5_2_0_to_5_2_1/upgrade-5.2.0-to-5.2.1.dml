-- Script to add tags.
-- Tags are added to
-- - server catalog
-- - portal catalog
-- - instances
-- - customizations

-- Switch delimiter to create stored procedures
--#SET TERMINATOR @

-- If the procedure does not exist the drop will fail but the script will continue.
DROP PROCEDURE add_tag@

-- Procedure to add an tag reference to the TAGS table if it does not exist.
CREATE PROCEDURE add_tag
(
    IN pContextItemName nvarchar(255),
    IN pTagName nvarchar(255),
    IN pTagType nvarchar(255)
)
LANGUAGE SQL
BEGIN
    DECLARE tagId bigint;
    DECLARE rc integer;

    set (tagId) = (select id from tags where  contextItemName = pContextItemName and name = pTagName and type = pTagType);

    IF tagId IS NULL
    THEN
        insert into tags
        ( id
		, contextItemName
        , name
        , type
        )
        values
        ( hibernate_sequence.nextVal
		, pContextItemName
        , pTagName
        , pTagType
        );
    END IF;
END@

-- Procedure to add an item tag reference to the ITEM_TAGS table if it does not exist.
-- If the procedure does not exist the drop will fail but the script will continue.
DROP PROCEDURE add_item_tag@

CREATE PROCEDURE add_item_tag
(
    IN pItemId bigint,
    IN pTagId bigint
)
LANGUAGE SQL
BEGIN
    DECLARE itemTagId bigint;
    DECLARE rc integer;

    set (itemTagId) = (select id from item_tags	where item_id = pItemId	and tag_id  = pTagId FETCH FIRST 1 ROW ONLY);

    IF itemTagId IS NULL
	THEN
        insert into item_tags
        ( id
		, item_id
        , tag_id
        , blacklist
        )
        values
        ( hibernate_sequence.nextVal
		, pItemId
        , pTagId
        , 0
        );
    END IF;
END@

-- Procedure to add an tag to the TAGS table if it does not exist.
-- This procedure will also add the tag to the item mentioned and to all its extensions.
-- If the procedure does not exist the drop will fail but the script will continue.
DROP PROCEDURE add_tag_to_item@

CREATE PROCEDURE add_tag_to_item
(
    IN pItemName nvarchar(255),
    IN pTagName nvarchar(255),
    IN pTagType nvarchar(255)
)
LANGUAGE SQL
BEGIN
    DECLARE serverItemId bigint;
    DECLARE tagId bigint;
	DECLARE portalName nvarchar(255);
    DECLARE portalItemId bigint;
    DECLARE instanceItemId bigint;
    DECLARE personalItemId bigint;

	-- Add tag to server scope
	call add_tag ('[BBHOST]', pTagName, pTagType);
    -- Insert item_tag for server catalog item
    set (serverItemId) = (select id from items where name=pItemName and contextItemName= '[BBHOST]');
    IF serverItemId IS NOT NULL
    THEN
        set (tagId) = (select id from tags where name=pTagName and type = pTagType and contextItemName= '[BBHOST]');
        call add_item_tag (serverItemId,tagId);

        -- Insert tag for portal catalog item
        set (portalItemId)=(0);
        loop1: loop
            set (portalItemId, portalName) = (select id, contextItemName from items where extendedItem_id=serverItemId and state='ASSIGNED' and id>portalItemId FETCH FIRST 1 ROW ONLY);
            IF portalItemId IS NULL THEN leave loop1; END IF;
            call add_tag (portalName, pTagName, pTagType);
            set (tagId) = (select id from tags where name=pTagName and type = pTagType and contextItemName= portalName);
            call add_item_tag (portalItemId,tagId);

            -- Insert tag for portal instances
            set (instanceItemId)=(0);
            loop2: loop
                set (instanceItemId) = (select id from items where extendedItem_id=portalItemId and state='INSTANTIATED' and id>instanceItemId FETCH FIRST 1 ROW ONLY);
                IF instanceItemId IS NULL THEN leave loop2; END IF;
                call add_item_tag (instanceItemId,tagId);
                -- Insert property for personalized items
                set (personalItemId)=(0);
                loop3: loop
                    set (personalItemId) = (select id from items where extendedItem_id=instanceItemId and state='PERSONALIZED' and id>personalItemId FETCH FIRST 1 ROW ONLY);
                    IF personalItemId IS NULL THEN leave loop3; END IF;
                    call add_item_tag (personalItemId,tagId);
                end loop;
            end loop;
        end loop;
    END IF;
END@

--#SET TERMINATOR ;

-- Migrate Link item references from name to uuid.
update property_definition ref
set    ref.internalvalue = (select item.uuid
                            from   items link
                            ,      items item
                            where  ref.name             = 'ItemRef'
                            and    ref.item_id          = link.id
                            and    link.type            = 'LINK'
                            and    link.contextitemname = item.contextitemname
                            and    item.name            = ref.internalvalue
                           )
where exists               (select '1'
                            from   items link
                            ,      items item
                            where  ref.name             = 'ItemRef'
                            and    ref.item_id          = link.id
                            and    link.type            = 'LINK'
                            and    link.contextitemname = item.contextitemname
                            and    item.name            = ref.internalvalue
                           )
;

-- --> Changes on Standard_Widget_Sample
-- Added tag backbase
call add_tag_to_item('Standard_Widget_Sample','backbase','regular');

-- --> Changes on Standard_W3C_Sample
-- Added tag backbase
call add_tag_to_item('Standard_W3C_Sample','backbase','regular');

-- --> Changes on CatalogBrowser
-- Added tag backbase
call add_tag_to_item('CatalogBrowser','backbase','regular');

-- --> Changes on TabLayoutContainer
-- Removed tag layout
delete from   item_tags
where (item_id in (select id from items where CONTEXTITEMNAME = '[BBHOST]' AND   NAME = 'TabLayoutContainer')
   or  item_id in (select ext.id
                  from items ext
                  ,    items ite
                  where ite.CONTEXTITEMNAME = '[BBHOST]'
                  AND   ite.NAME = 'TabLayoutContainer'
                  and   ite.id = ext.extendedItem_id
                  )
       )
and   tag_id in (select id
                 from tags
                 where name = 'layout'
                )
;

-- Updated property title
update property_definition
set    internalvalue = 'Horizontal Tab'
where (item_id in (select id from items where CONTEXTITEMNAME = '[BBHOST]' AND   NAME = 'TabLayoutContainer')
   or  item_id in (select ext.id
                  from items ext
                  ,    items ite
                  where ite.CONTEXTITEMNAME = '[BBHOST]'
                  AND   ite.NAME = 'TabLayoutContainer'
                  and   ite.id = ext.extendedItem_id
                  )
       )
and   name = 'title'
;

-- Updated property TemplateName
update property_definition
set    internalvalue = 'HTab'
where (item_id in (select id from items where CONTEXTITEMNAME = '[BBHOST]' AND   NAME = 'TabLayoutContainer')
   or  item_id in (select ext.id
                  from items ext
                  ,    items ite
                  where ite.CONTEXTITEMNAME = '[BBHOST]'
                  AND   ite.NAME = 'TabLayoutContainer'
                  and   ite.id = ext.extendedItem_id
                  )
       )
and   name = 'TemplateName'
;


-- Modified property selectedChild: Added label and viewHint
update property_definition
set    viewhint = 'text-input,designModeOnly,user'
,      label = 'Default tab'
where (item_id in (select id from items where CONTEXTITEMNAME = '[BBHOST]' AND   NAME = 'TabLayoutContainer')
   or  item_id in (select ext.id
                  from items ext
                  ,    items ite
                  where ite.CONTEXTITEMNAME = '[BBHOST]'
                  AND   ite.NAME = 'TabLayoutContainer'
                  and   ite.id = ext.extendedItem_id
                  )
       )
and   name = 'selectedChild'
;

-- Modified property hideTab: Changed type from string to boolean default value false.
update property_definition
set    type = 'boolean'
,      internalvalue = 'false'
where (item_id in (select id from items where CONTEXTITEMNAME = '[BBHOST]' AND   NAME = 'TabLayoutContainer')
   or  item_id in (select ext.id
                  from items ext
                  ,    items ite
                  where ite.CONTEXTITEMNAME = '[BBHOST]'
                  AND   ite.NAME = 'TabLayoutContainer'
                  and   ite.id = ext.extendedItem_id
                  )
       )
and   name = 'hideTab'
;

-- Removed property defaultTab
delete from property_definition
where (item_id in (select id from items where CONTEXTITEMNAME = '[BBHOST]' AND   NAME = 'TabLayoutContainer')
   or  item_id in (select ext.id
                  from items ext
                  ,    items ite
                  where ite.CONTEXTITEMNAME = '[BBHOST]'
                  AND   ite.NAME = 'TabLayoutContainer'
                  and   ite.id = ext.extendedItem_id
                  )
       )
and name in ('defaultTab')
;

-- --> Change TabLayoutContainer to HTabLayoutContainer (rename of server catalog item)
update items set name = 'HTabLayoutContainer' where name = 'TabLayoutContainer' and CONTEXTITEMNAME = '[BBHOST]';

-- --> Change Tab container template
-- Update property Web
-- Change name from Tab to HTab
update property_definition
set    internalvalue = 'containers/bbHTabContainerLayout'
where  item_id in (select id from items where CONTEXTITEMNAME = '[BBHOST]' AND   NAME = 'Tab')
and name = 'Web'
;

update items set name = 'HTab' where name = 'Tab' and CONTEXTITEMNAME = '[BBHOST]';

-- --> Changes on AdvancedNav widget
-- Modified property navTemplate: value (location of the template) changed
update property_definition
set    internalvalue = '$(contextRoot)/static/backbase.com.2012.nexus/widgets/AdvancedNav/navTemplate/genericDropdownMenu/mustache_top_level.html'
where  internalvalue='$(contextRoot)/static/backbase.com.2012.nexus/widgets/AdvancedNav/navTemplate/BBStyleTemplate/mustache_top_level.html'
;

-- Added tag backbase
call add_tag_to_item('AdvancedNav','backbase','regular');

-- --> Changes on SectionNav widget
-- Modified property navDepth: value changed from 2 to 1
update property_definition
set    internalvalue = '1'
where (item_id in (select id from items where CONTEXTITEMNAME = '[BBHOST]' AND   NAME = 'SectionNav')
   or  item_id in (select ext.id
                  from items ext
                  ,    items ite
                  where ite.CONTEXTITEMNAME = '[BBHOST]'
                  AND   ite.NAME = 'SectionNav'
                  and   ite.id = ext.extendedItem_id
                  )
       )
and   name = 'navDepth'
and   internalvalue = '2'
;

-- Added tag backbase
call add_tag_to_item('SectionNav','backbase','regular');

-- Cleanup of stored procedures
drop procedure add_tag_to_item;

drop procedure add_item_tag;

drop procedure add_tag;

-- remove sys2sys acl from portalfoundation item
delete from acl_entry
where sid = (select id from acl_sid where sid = 'group_sys2sys')
and   acl_object_identity = (select obj.id
                             from   acl_object_identity obj
                             ,      items ite
                             ,      acl_class cls
                             where  cls.id = obj.object_id_class
                             and    ite.id = obj.object_id_identity
                             and    cls.class = 'com.backbase.portal.foundation.domain.model.PortalFoundation')
;

-- Fix hierarchical links on urls
-- Add sectionName property containing the link name
-- Add generatedUrl property based on the link hierarchy and the sectionName value.
insert into property_definition
( id
, name
, internalValue
, type
, item_id
)
select
   hibernate_sequence.nextVal
, 'sectionName'
,  lower(replace(translate(replace(pdn.internalValue, ' ', '-'),  '', '~!@#$%^&*()+`=[]{};'':",./<>?'), ' ', ''))
, 'string'
, ite.id
from  items ite
,     property_definition pdn
where ite.id = pdn.item_id
and   ite.type = 'LINK'
and   pdn.name = 'title'
;

-- Switch delimiter to create stored procedures
--#SET TERMINATOR @

drop procedure fix_dup_section_name@

create procedure fix_dup_section_name
LANGUAGE SQL
begin
   DECLARE ln_counter integer;

   DECLARE ln_link_id bigint;
   DECLARE lv_link_section_name nvarchar(768);
   DECLARE lv_link_parent_item_name nvarchar(255);
   DECLARE lv_link_context_item_name nvarchar(255);

   DECLARE ln_link_dup_id bigint;

  DECLARE SQLSTATE CHAR(5) DEFAULT '00000';
  DECLARE c_dup_link cursor FOR
          select ite1.id
          ,      pdn1.internalValue
          ,      ite1.parentItemName
          ,      ite1.contextItemName
          from   items ite1
          ,      property_definition pdn1
          ,      items ite2
          ,      property_definition pdn2
          where  ite1.id = pdn1.item_id
          and    ite1.type = 'LINK'
          and    ite1.parentItemName != ite1.contextItemName
          and    pdn1.name = 'sectionName'
          and    ite2.id = pdn2.item_id
          and    ite2.type = 'LINK'
          and    ite2.parentItemName != ite2.contextItemName
          and    pdn2.name = 'sectionName'
          and    ite1.contextItemName = ite2.contextItemName
          and    ite1.parentItemName = ite2.parentItemName
          and    ite1.id != ite2.id
          and    pdn1.internalValue = pdn2.internalValue
          ;

  DECLARE c_dup_link2 cursor FOR
          select ite1.id
          from   items ite1
          ,      property_definition pdn1
          where  ite1.id = pdn1.item_id
          and    ite1.type = 'LINK'
          and    ite1.id != ln_link_id
          and    pdn1.name = 'sectionName'
          and    pdn1.internalValue = lv_link_section_name
          and    ite1.parentItemName = lv_link_parent_item_name
          and    ite1.contextItemName = lv_link_context_item_name
          ;

   OPEN c_dup_link;
   FETCH FROM c_dup_link INTO ln_link_id, lv_link_section_name, lv_link_parent_item_name, lv_link_context_item_name;

   WHILE(SQLSTATE = '00000') DO
      set ln_counter = 1;
      OPEN c_dup_link2 USING ln_link_id, lv_link_section_name, lv_link_parent_item_name, lv_link_context_item_name;
      FETCH FROM c_dup_link2 INTO ln_link_dup_id;

      WHILE(SQLSTATE = '00000') DO
	     -- Update the duplicate section name
	     update property_definition
             set    internalValue = lv_link_section_name || '-' || ln_counter
	     where  item_id = ln_link_dup_id
	     and    name = 'sectionName'
	     ;

	     set ln_counter = ln_counter + 1;
         FETCH FROM c_dup_link2 INTO ln_link_dup_id;
      END WHILE;

     CLOSE c_dup_link2;
	 -- Close the cursor to refresh the result
     CLOSE c_dup_link;
     OPEN c_dup_link;
     FETCH FROM c_dup_link INTO ln_link_id, lv_link_section_name, lv_link_parent_item_name, lv_link_context_item_name;
   END WHILE;

   CLOSE c_dup_link;
end@

--#SET TERMINATOR ;
call fix_dup_section_name;

-- Switch delimiter to create stored procedures
--#SET TERMINATOR @

drop procedure fix_generated_url@

create procedure fix_generated_url
LANGUAGE SQL
begin
   DECLARE lv_generated_url nvarchar(1000);
   DECLARE lv_parent_item_name nvarchar(255);

   DECLARE ln_link_id bigint;
   DECLARE lv_link_section_name nvarchar(768);
   DECLARE lv_link_parent_item_name nvarchar(255);
   DECLARE lv_link_parent_section_name nvarchar(768);
   DECLARE lv_link_context_item_name nvarchar(255);

  DECLARE SQLSTATE CHAR(5) DEFAULT '00000';
  DECLARE c_link cursor FOR
          select ite.id
          ,      pdn.internalValue
          ,      ite.parentItemName
          ,      ite.contextItemName
          from   items ite
          ,      property_definition pdn
          where  ite.id = pdn.item_id
          and    ite.type = 'LINK'
          and    ite.parentItemName != ite.contextItemName
          and    pdn.name = 'sectionName'
          ;

   OPEN c_link;
   FETCH FROM c_link INTO ln_link_id, lv_link_section_name, lv_link_parent_item_name, lv_link_context_item_name;

   WHILE(SQLSTATE = '00000') DO
     set lv_generated_url = lv_link_section_name;
     loop1:
     loop
         set (lv_parent_item_name
         ,   lv_link_parent_section_name) = (select ite.parentItemName
                                            ,      pdn.internalValue
                                            from   items ite
                                            ,      property_definition pdn
                                            where  ite.id = pdn.item_id
                                            and    ite.name = lv_link_parent_item_name
                                            and    ite.parentItemName != ite.contextItemName
                                            and    ite.contextItemName = lv_link_context_item_name
                                            and    pdn.name = 'sectionName'
                                           );

         if lv_parent_item_name is null then leave loop1; end if;

         set lv_generated_url = lv_link_parent_section_name || '/' || lv_generated_url;
         set lv_link_parent_item_name = lv_parent_item_name;
     end loop;

     set lv_generated_url = lv_link_context_item_name  || '/' || lv_generated_url;

     insert into property_definition
     ( id
     , name
     , internalValue
     , type
     , item_id
     )
     values
     ( hibernate_sequence.nextVal
     , 'generatedUrl'
     , lv_generated_url
     , 'string'
     , ln_link_id
     );

     FETCH FROM c_link INTO ln_link_id, lv_link_section_name, lv_link_parent_item_name, lv_link_context_item_name;
   END WHILE;

   CLOSE c_link;
end@

--#SET TERMINATOR ;
call fix_generated_url;


-- Insert ACL for every unsecured property. Property will inherit security from its item.
insert into acl_object_identity
(
  OBJECT_ID_CLASS
, OBJECT_ID_IDENTITY
, PARENT_OBJECT
, OWNER_SID
, ENTRIES_INHERITING
)
select (select id from acl_class where class = 'com.backbase.portal.foundation.domain.conceptual.PropertyDefinition')
,      pdn.id
,      (select id
        from acl_object_identity
        where OBJECT_ID_IDENTITY = ite.id
        and   object_id_class = (select id from acl_class where class = cls.class)
       )
,      (select owner_sid
        from acl_object_identity
        where OBJECT_ID_IDENTITY = ite.id
        and   object_id_class = (select id from acl_class where class = cls.class)
       )
,      1
from   acl_object_identity obj
,      acl_class           cls
,      items               ite
,      property_definition pdn
where  OBJ.OBJECT_ID_IDENTITY = ite.id
and    obj.object_id_class = cls.id
and    cls.class =  concat('com.backbase.portal.foundation.domain.model.', ite.discriminator)
and    ite.id = PDN.ITEM_ID
and    pdn.id not in (select object_id_identity
                      from   acl_object_identity
                      where  object_id_class in (select id from acl_class where class = 'com.backbase.portal.foundation.domain.conceptual.PropertyDefinition')
                    )
;
